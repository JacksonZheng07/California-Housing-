# -*- coding: utf-8 -*-
"""California Housing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QyblcxZgWoqDLo8YRDm3ln8fLFFi26dp
"""

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
import torch
import numpy as np
import matplotlib.pyplot as plt

# Load and split data
data = fetch_california_housing()
X = data.data
y = data.target

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/test split
X_train_np, X_test_np, y_train_np, y_test_np = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42)

#Setting up X,y train
X_train = torch.from_numpy(X_train_np.astype(np.float32))
y_train = torch.from_numpy(y_train_np.astype(np.float32))

# Convert test set to tensors
X_test = torch.from_numpy(X_test_np.astype(np.float32))
y_test = torch.from_numpy(y_test_np.astype(np.float32)).view(-1, 1)

y_train = y_train.view(y_train.shape[0], 1)

#Setting Up Model
n_sample, n_features = X_train.shape
input = n_features
output = 1
model = torch.nn.Linear(input, output)

LR = 0.0001
epochs = 100000
criterion = torch.nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=LR)

#Running test
for epoch in range(epochs):
  #Zeroing
  optimizer.zero_grad()

  #Finding loss
  y_pred = model(X_train)
  loss = criterion(y_pred, y_train)

  #Back Prop
  loss.backward()

  #Optimizing
  optimizer.step()

  if (epoch+1) % 10000 == 0:
    print(f'epoch: {epoch+1}, loss = {loss.item():.4f}')

# Predict on test set
with torch.no_grad():
    y_pred_test = model(X_test)

# Convert predictions and targets to NumPy
y_pred_np = y_pred_test.numpy()
y_test_np = y_test.numpy()

# Calculate RÂ² score
r2 = r2_score(y_test_np, y_pred_np)
print(f'R2 Score: {r2:.4f}')

predicted = model(X_train).detach().numpy()
plt.plot(X_train, y_train, 'ro')
plt.plot(X_train, predicted, 'b')
plt.show()